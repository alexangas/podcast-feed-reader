version: '{branch}.{build}'
pull_requests:
  do_not_increment_build_number: true
image: Visual Studio 2017
init:
- ps: >-
    Write-Host APPVEYOR_ACCOUNT_NAME=$env:APPVEYOR_ACCOUNT_NAME

    Write-Host APPVEYOR_PROJECT_NAME=$env:APPVEYOR_PROJECT_NAME

    Write-Host APPVEYOR_BUILD_NUMBER=$env:APPVEYOR_BUILD_NUMBER

    Write-Host APPVEYOR_BUILD_VERSION=$env:APPVEYOR_BUILD_VERSION

    Write-Host APPVEYOR_BUILD_WORKER_IMAGE=$env:APPVEYOR_BUILD_WORKER_IMAGE

    Write-Host APPVEYOR_REPO_NAME=$env:APPVEYOR_REPO_NAME

    Write-Host APPVEYOR_REPO_BRANCH=$env:APPVEYOR_REPO_BRANCH

    Write-Host APPVEYOR_REPO_TAG=$env:APPVEYOR_REPO_TAG

    Write-Host APPVEYOR_REPO_TAG_NAME=$env:APPVEYOR_REPO_TAG_NAME

    Write-Host APPVEYOR_REPO_COMMIT=$env:APPVEYOR_REPO_COMMIT

    Write-Host APPVEYOR_REPO_COMMIT_AUTHOR=$env:APPVEYOR_REPO_COMMIT_AUTHOR

    Write-Host APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL=$env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL

    Write-Host APPVEYOR_REPO_COMMIT_TIMESTAMP=$env:APPVEYOR_REPO_COMMIT_TIMESTAMP

    Write-Host APPVEYOR_REPO_COMMIT_MESSAGE=$env:APPVEYOR_REPO_COMMIT_MESSAGE

    Write-Host APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH=$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
    
    Write-Host APPVEYOR_PULL_REQUEST_NUMBER=$env:APPVEYOR_PULL_REQUEST_NUMBER

environment:
  BUILD_CONFIGURATION: Release
  TEST_PROJECT: .\tests\PodcastFeedReader.Tests
  TEST_FILTER: Category!=Performance
  SRC_PROJECT: .\src\PodcastFeedReader
  SONAR_PROJECT: alexangas_podcast-feed-reader
  SONAR_ORG: alexangas-github
  SONAR_TOKEN:
    secure: 4a7+xiB1/0gxBkAF+VILSRGyDACWtw/UOAv2gjlB2WRsbW6Mah+DDmkGogacgJpE
build_script:
- ps: >-
    dotnet tool install dotnet-sonarscanner --global

    dotnet test $env:TEST_PROJECT --filter "$env:TEST_FILTER" --configuration $env:BUILD_CONFIGURATION --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../coverage.xml /p:Exclude="[xunit.*]*"

    if (!$env:APPVEYOR_PULL_REQUEST_NUMBER) {
        dotnet sonarscanner begin /k:"$env:SONAR_PROJECT" /o:"$env:SONAR_ORG" /d:sonar.login="$env:SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /v:"$env:APPVEYOR_BUILD_NUMBER" /d:sonar.cs.opencover.reportsPaths="coverage.xml"
    } else {
        dotnet sonarscanner begin /k:"$env:SONAR_PROJECT" /o:"$env:SONAR_ORG" /d:sonar.login="$env:SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /v:"$env:APPVEYOR_BUILD_NUMBER" /d:sonar.cs.opencover.reportsPaths="coverage.xml" /d:sonar.pullrequest.branch="$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH" /d:sonar.pullrequest.key="$env:APPVEYOR_PULL_REQUEST_NUMBER" /d:sonar.pullrequest.provider="github" /d:sonar.pullrequest.github.repository="$env:APPVEYOR_REPO_NAME" /d:sonar.pullrequest.github.endpoint="https://api.github.com/"
    }

    dotnet build --configuration $env:BUILD_CONFIGURATION

    if (!$env:APPVEYOR_PULL_REQUEST_NUMBER) {
        dotnet sonarscanner end /d:sonar.login="$env:SONAR_TOKEN"
    }

    if (!$env:APPVEYOR_PULL_REQUEST_NUMBER) {
        dotnet pack $env:SRC_PROJECT --configuration $env:BUILD_CONFIGURATION
    }
after_test:
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      (Get-Item -Path ".\" -Verbose).FullName
      bash codecov.sh -f "./coverage.xml"
artifacts:
- path: '**\*.nupkg'
  name: NuGet Package
deploy: off
notifications:
- provider: GitHubPullRequest
  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true
- provider: Email
  to:
  - alexangas@gmail.com
  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true